<?php

namespace ICT\Core\Test;

use ICT\Core\Conf;
use ICT\Core\Session;
use ICT\Core\Token;
use ICT\Core\User;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-01-12 at 06:21:07.
 */
class TokenTest extends PHPUnit_Framework_TestCase
{

  /**
   * @var Token
   */
  protected $object;
  protected $data = array(
      'element1' => 'Value for first element',
      'array1' => array(
          'child1' => 'Child one',
          'child2' => 'Child two',
          'child3' => array(
              'dog1' => 'tommy',
              'dog2' => 'jack'
          )
      ),
      'element2' => 'Value for third element',
      'body' => 'hello world!
We are going to test a multiline message
Like we need to send in emails
username :    test user,
password :    test pass,

Regards
'      
  );

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $oUser = new User(User::GUEST);
    Session::set('user', $oUser);
    $aWebsite = array(
        'url' => 'http://www.ictinnovations.com/',
        'live' => true,
        'title' => 'ICT Innovations offcial website'
    );
    Conf::set('website', $aWebsite);
    $this->object = new Token(Token::SOURCE_ALL, $this->data);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    unset($this->object);
  }

  /**
   * @covers ICT\Core\Token::add
   * @todo   Implement testAdd().
   */
  public function testAdd()
  {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers ICT\Core\Token::merge
   */
  public function testMerge()
  {
    $newData = array(
        'array1' => array(
            'child3' => array(
                'dog3' => 'some deep test'
            )
        ),
        'element2' => 'replace test pass',
        'element3' => 'new value test'
    );
    $newToken = new Token(Token::SOURCE_CUSTOM, $newData);
    $this->object->merge($newToken);

    // first confirm existing structure
    $hello = $this->object->render_string('[element1]');
    $world = $this->object->render_string('[array1:child1]');
    $this->assertSame($this->data['element1'], $hello);
    $this->assertSame($this->data['array1']['child1'], $world);
    // then test new modifications
    $element2 = $this->object->render_string('[element2]');
    $dog3 = $this->object->render_string('[array1:child3:dog3]');
    $this->assertSame($newData['element2'], $element2);
    $this->assertSame($newData['array1']['child3']['dog3'], $dog3);
  }

  /**
   * @covers ICT\Core\Token::render_template
   * @todo   Implement testRender_template().
   */
  public function testRender_template()
  {
    $path_template = dirname(dirname(dirname(__FILE__))) . DIRECTORY_SEPARATOR . 'data';
    $this->object->template_dir = $path_template;
    $json_output = $this->object->render_template('token_test.json');
    $this->assertJson($json_output);
    $array_output = json_decode($json_output, true);
    $this->assertSame($this->data['element1'], $array_output['to']);
    $this->assertSame($this->data['array1']['child1'], $array_output['from']);
    $this->assertSame($this->data['array1']['child3']['dog2'], $array_output['subject']);
    $this->assertNotEmpty($array_output['body']);
  }

  /**
   * @covers ICT\Core\Token::render_variable
   */
  public function testRender_variable()
  {
    $tokenVariable = array(
        'hello' => '[element1]',
        'world' => '[array1:child1]',
        'title' => '[array1:child3:dog2]',
        'unknown' => '[unknown:unknown]'
    );
    $fullVariable = $this->object->render_variable($tokenVariable, Token::KEEP_ORIGNAL);
    $this->assertSame($this->data['element1'], $fullVariable['hello']);
    $this->assertSame($this->data['array1']['child1'], $fullVariable['world']);
    $this->assertSame($this->data['array1']['child3']['dog2'], $fullVariable['title']);
    $this->assertSame('[unknown:unknown]', $fullVariable['unknown'], 'Testing with KEEP_ORIGNAL failed');
  }

  /**
   * @covers ICT\Core\Token::render_string
   * @covers ICT\Core\Token::render_string_callback
   */
  public function testRender_string()
  {
    $hello = $this->object->render_string('[element1]');
    $world = $this->object->render_string('[array1:child1]');
    $title = $this->object->render_string('[array1:child3:dog2]');
    $this->object->default_value = Token::REPLACE_EMPTY;
    $unknown = $this->object->render_string('[unknown:unknown]');
    $this->assertSame($this->data['element1'], $hello);
    $this->assertSame($this->data['array1']['child1'], $world);
    $this->assertSame($this->data['array1']['child3']['dog2'], $title);
    $this->assertEmpty($unknown, "Testing with REPLACE_EMPTY failed");
  }

}